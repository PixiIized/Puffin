.Example Puffin program

...
Hey!
This will showcase all the features
...

.Variables
let int date :: 20;
fix str greeting :: 'Good morning!';
let str day :: 'Monday';
fix flo pay :: 12.5;

.Arrays and matrices
let arr fridge :: ['carrots', 'ketchup', 'steak'];
fix mtx dresser :: [['red shirt', 'hoodie', 'hat'],['jeans', 'khakis', 'socks']];

.Objects
new obj Man:
    str name :: 'Jack';
    int age :: 35;
    flo height :: 6.2;
end;

.Logging
output(greeting);

.Ternary
output(day = 'Monday' ? 'Today is terrible' ?? 'Alright');

.References
let int dateReference :: $date; .If date updates, so will dateReference

let str $Man.name :: 'happy' .This creates a new variable called Jack and assigns to it a value of 'happy'. The value of Man.name remains unchanged

.Function and conditionals
def routine(str day, int date):
    if day = 'Monday':
        output('sad');
    elif day = 'Friday':
        output('happy');
    else:
        output('meh');
    end;
    date :: date + 1;
    output(date);
end;

.Calling user made function
routine(day, date); .This will return 'sad' and '21'
output(date); .This returns 20- wait, what? we just increased date by 1, but it doesn't seem to have updated
routine(day, $date);
output(date); .21! So only when we pass a reference as a parameter can it update outside variables- otherwise it just creates a copy local to the function

.Loops
fizzBuzz(int start, int finish):
  for i, start, finish: .This iterates i from start to finish
    if i % 3 = 0 and i % 5 = 0:
      output('fizzbuzz');
    elif i % 3 = 0:
      output('fizz');
    elif i % 5 = 0:
      output('buzz');
    else:
      output(i);
    end;
  end;
end;

fizzBuzz(1, 20);
...
this will output:

1
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
16
17
fizz
19
buzz
...